# This file copyright (c) 2011-2015, Quickstep Technologies LLC.
# Copyright (c) 2015, Pivotal Software, Inc.
# All rights reserved.
# See file CREDITS.txt for details.

select * from test where int_col < 5 order by int_col desc, long_col asc limit 5
--
+-----------+--------------------+---------------+------------------------+--------------------+
|int_col    |long_col            |float_col      |double_col              |char_col            |
+-----------+--------------------+---------------+------------------------+--------------------+
|          4|                  16|              2|                       8|          4 2.000000|
|          2|                   4|     1.41421354|      2.8284271247461903|          2 1.414214|
|         -1|                   1|              1|                      -1|         -1 1.000000|
|         -3|                   9|     1.73205078|      -5.196152422706632|         -3 1.732051|
|         -5|                  25|     2.23606801|     -11.180339887498949|         -5 2.236068|
+-----------+--------------------+---------------+------------------------+--------------------+
==

# Simple SELECT.
select * from test where int_col < 10 and long_col < 100 and double_col < 0
--
+-----------+--------------------+---------------+------------------------+--------------------+
|int_col    |long_col            |float_col      |double_col              |char_col            |
+-----------+--------------------+---------------+------------------------+--------------------+
|         -1|                   1|              1|                      -1|         -1 1.000000|
|         -3|                   9|     1.73205078|      -5.196152422706632|         -3 1.732051|
|         -5|                  25|     2.23606801|     -11.180339887498949|         -5 2.236068|
|         -7|                  49|     2.64575124|     -18.520259177452136|         -7 2.645751|
|         -9|                  81|              3|                     -27|         -9 3.000000|
+-----------+--------------------+---------------+------------------------+--------------------+
==

select * from test  where int_col < 10 and long_col < 100
--
+-----------+--------------------+---------------+------------------------+--------------------+
|int_col    |long_col            |float_col      |double_col              |char_col            |
+-----------+--------------------+---------------+------------------------+--------------------+
|         -1|                   1|              1|                      -1|         -1 1.000000|
|          2|                   4|     1.41421354|      2.8284271247461903|          2 1.414214|
|         -3|                   9|     1.73205078|      -5.196152422706632|         -3 1.732051|
|          4|                  16|              2|                       8|          4 2.000000|
|         -5|                  25|     2.23606801|     -11.180339887498949|         -5 2.236068|
|          6|                  36|     2.44948983|      14.696938456699067|          6 2.449490|
|         -7|                  49|     2.64575124|     -18.520259177452136|         -7 2.645751|
|          8|                  64|     2.82842708|      22.627416997969522|          8 2.828427|
|         -9|                  81|              3|                     -27|         -9 3.000000|
+-----------+--------------------+---------------+------------------------+--------------------+
==


select int_col, int_col+100 as alias_col, char_col as char_col from test  where int_col < 10 and long_col < 100
--
+-----------+-----------+--------------------+
|int_col    |alias_col  |char_col            |
+-----------+-----------+--------------------+
|         -1|         99|         -1 1.000000|
|          2|        102|          2 1.414214|
|         -3|         97|         -3 1.732051|
|          4|        104|          4 2.000000|
|         -5|         95|         -5 2.236068|
|          6|        106|          6 2.449490|
|         -7|         93|         -7 2.645751|
|          8|        108|          8 2.828427|
|         -9|         91|         -9 3.000000|
+-----------+-----------+--------------------+
==

# Nested queries.
select * from (select *
               from  (select *
                      from (select *
                            from test
                            where long_col < 100) a
                      where double_col<0) a
               where long_col < 200) a where int_col < 10
--
+-----------+--------------------+---------------+------------------------+--------------------+
|int_col    |long_col            |float_col      |double_col              |char_col            |
+-----------+--------------------+---------------+------------------------+--------------------+
|         -1|                   1|              1|                      -1|         -1 1.000000|
|         -3|                   9|     1.73205078|      -5.196152422706632|         -3 1.732051|
|         -5|                  25|     2.23606801|     -11.180339887498949|         -5 2.236068|
|         -7|                  49|     2.64575124|     -18.520259177452136|         -7 2.645751|
|         -9|                  81|              3|                     -27|         -9 3.000000|
+-----------+--------------------+---------------+------------------------+--------------------+
==

with subquery1 as (select * from test where int_col < 10),
     subquery2 as (select * from subquery1 where long_col < 100)
select * from subquery2 where double_col < 0
--
[same as above]
==

select NULL, 1/NULL, int_col+NULL, int_col+long_col, float_col+NULL, -NULL
from test
where long_col < 100
order by 4 nulls last
--
+----+--------+--------------+--------------------+----------------+-----+
|NULL|(1/NULL)|(int_col+NULL)|(int_col+long_col)  |(float_col+NULL)|-NULL|
+----+--------+--------------+--------------------+----------------+-----+
|NULL|    NULL|          NULL|                   0|            NULL| NULL|
|NULL|    NULL|          NULL|                   6|            NULL| NULL|
|NULL|    NULL|          NULL|                   6|            NULL| NULL|
|NULL|    NULL|          NULL|                  20|            NULL| NULL|
|NULL|    NULL|          NULL|                  20|            NULL| NULL|
|NULL|    NULL|          NULL|                  42|            NULL| NULL|
|NULL|    NULL|          NULL|                  42|            NULL| NULL|
|NULL|    NULL|          NULL|                  72|            NULL| NULL|
|NULL|    NULL|          NULL|                  72|            NULL| NULL|
|NULL|    NULL|          NULL|                NULL|            NULL| NULL|
+----+--------+--------------+--------------------+----------------+-----+
==

select int_col "
this

is multi-line

column name
" from test where int_col < 10 and long_col < 100 and double_col < 0
--
+----------------------------------+
|
this

is multi-line

column name
|
+----------------------------------+
|                                -1|
|                                -3|
|                                -5|
|                                -7|
|                                -9|
+----------------------------------+
==

# Alias support.
select int_col+100 as alias_col, char_col as char_col from test  where int_col < 10 and long_col < 100
--
+-----------+--------------------+
|alias_col  |char_col            |
+-----------+--------------------+
|         99|         -1 1.000000|
|        102|          2 1.414214|
|         97|         -3 1.732051|
|        104|          4 2.000000|
|         95|         -5 2.236068|
|        106|          6 2.449490|
|         93|         -7 2.645751|
|        108|          8 2.828427|
|         91|         -9 3.000000|
+-----------+--------------------+
==

# The execution engine currently does not support self-join.
select a.int_col, a.int_col*b.int_col, b.long_col
from test as a, test as b
where a.int_col*b.int_col=b.long_col
--
ERROR: NestedLoopsJoin does not support self-join yet
==

# The nested loops join is not a self-join, because the predicate "a.int_col<10" is pushed under the join, which results
# in a new relation.
select a.int_col, a.int_col*b.int_col, b.long_col
from test as a, test as b
where a.long_col< 100 and a.int_col*b.int_col=b.long_col
--
+-----------+---------------------+--------------------+
|int_col    |(a.int_col*b.int_col)|long_col            |
+-----------+---------------------+--------------------+
|         -1|                    1|                   1|
|          2|                    4|                   4|
|         -3|                    9|                   9|
|          4|                   16|                  16|
|         -5|                   25|                  25|
|          6|                   36|                  36|
|         -7|                   49|                  49|
|          8|                   64|                  64|
|         -9|                   81|                  81|
+-----------+---------------------+--------------------+
==

# Hash join does not support the self-join.
select a.int_col, b.int_col
from test as a, test as b
where a.int_col=b.int_col
--
ERROR: Self-join is not supported
==

# This is not a self-join, because there is a Select under the HashJoin for "a.long_col < 50".
select a.int_col, b.int_col
from test as a, test as b
where a.long_col < 50 and a.int_col=b.int_col
--
+-----------+-----------+
|int_col    |int_col    |
+-----------+-----------+
|         -1|         -1|
|          2|          2|
|         -3|         -3|
|          4|          4|
|         -5|         -5|
|          6|          6|
|         -7|         -7|
+-----------+-----------+
==

# Hash join does not support a join predicate with two different types of attributes.
select a.int_col, b.long_col
from test as a, test as b
where a.int_col=b.long_col
--
ERROR: Equality join predicate between two attributes of different types is not allowed in HashJoin
==

# Join with char-type attributes.
select a.char_col, b.char_col, a.int_col
from test as a, test as b
where a.char_col=b.char_col and a.long_col < 100
--
+--------------------+--------------------+-----------+
|char_col            |char_col            |int_col    |
+--------------------+--------------------+-----------+
|          0 0.000000|          0 0.000000|       NULL|
|         -1 1.000000|         -1 1.000000|         -1|
|          2 1.414214|          2 1.414214|          2|
|         -3 1.732051|         -3 1.732051|         -3|
|          4 2.000000|          4 2.000000|          4|
|         -5 2.236068|         -5 2.236068|         -5|
|          6 2.449490|          6 2.449490|          6|
|         -7 2.645751|         -7 2.645751|         -7|
|          8 2.828427|          8 2.828427|          8|
|         -9 3.000000|         -9 3.000000|         -9|
+--------------------+--------------------+-----------+
==

# Cross-product
select a.int_col, b.int_col
from test as a, test as b
where a.int_col between 0 and 3 and b.int_col between 0 and 3
--
+-----------+-----------+
|int_col    |int_col    |
+-----------+-----------+
|          2|          2|
+-----------+-----------+
==

# Mixed multiple nested loops joins and hash joins
select a.int_col, b.int_col, c.float_col, d.float_col+a.int_col, d.float_col, b.double_col, c.int_col
from test as a,
     test as b,
     test as c,
     (select a.float_col from test as a, test as b where a.int_col<5) as d
where a.int_col=b.int_col and 
      a.long_col=b.long_col and
      c.float_col>d.float_col+a.int_col and 
      d.float_col <= 1 and
      a.int_col between 0 and 5 and
      c.float_col>4.7
--
+-----------+-----------+---------------+-----------------------+---------------+------------------------+-----------+
|int_col    |int_col    |float_col      |(d.float_col+a.int_col)|float_col      |double_col              |int_col    |
+-----------+-----------+---------------+-----------------------+---------------+------------------------+-----------+
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.79583168|                      3|              1|      2.8284271247461903|        -23|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
|          2|          2|     4.89897966|                      3|              1|      2.8284271247461903|         24|
+-----------+-----------+---------------+-----------------------+---------------+------------------------+-----------+
==

# FIXME(qzeng): Inner nested-loops join has no output column, causing query
# result to be INCORRECT.
SELECT COUNT(*) FROM (SELECT a.float_col FROM test a, test b WHERE a.float_col > 1) c
--
+--------------------+
|COUNT(*)            |
+--------------------+
|                   0|
+--------------------+
==

select date '2000-02-29' + interval '1 year',
       date '1998-03-31' + interval '1 month',
       date '2000-03-31' - interval '1 month',
       date '2000-01-31' + interval '1 month',
       date '2000-02-29' + interval '1 day',
       date '2000-02-29' - interval '1 year'
from test
where int_col = 2
--
+----------------------------------------------------+-----------------------------------------------------+-----------------------------------------------------+-----------------------------------------------------+--------------------------------------------------+----------------------------------------------------+
|(Datetime('2000-02-29')+YearMonthInterval('1 year'))|(Datetime('1998-03-31')+YearMonthInterval('1 month'))|(Datetime('2000-03-31')-YearMonthInterval('1 month'))|(Datetime('2000-01-31')+YearMonthInterval('1 month'))|(Datetime('2000-02-29')+DatetimeInterval('1 day'))|(Datetime('2000-02-29')-YearMonthInterval('1 year'))|
+----------------------------------------------------+-----------------------------------------------------+-----------------------------------------------------+-----------------------------------------------------+--------------------------------------------------+----------------------------------------------------+
|                                 2001-02-28T00:00:00|                                  1998-04-30T00:00:00|                                  2000-02-29T00:00:00|                                  2000-02-29T00:00:00|                               2000-03-01T00:00:00|                                 1999-02-28T00:00:00|
+----------------------------------------------------+-----------------------------------------------------+-----------------------------------------------------+-----------------------------------------------------+--------------------------------------------------+----------------------------------------------------+
==

select date '2000-02-29' - date '2000-02-28',
       date '2000-02-29' - date '1999-02-28'
from test
where int_col = 2
--
+-----------------------------------------------+-----------------------------------------------+
|(Datetime('2000-02-29')-Datetime('2000-02-28'))|(Datetime('2000-02-29')-Datetime('1999-02-28'))|
+-----------------------------------------------+-----------------------------------------------+
|                                 1 day 00:00:00|                              366 days 00:00:00|
+-----------------------------------------------+-----------------------------------------------+
==

select interval '1 year' + interval '1 month',
       interval '1 year' + interval '13 month',
       interval '21 day' + interval '14 day',
       interval '21 day' * 4
from test
where int_col = 2
--
+----------------------------------------------------------+-----------------------------------------------------------+-------------------------------------------------------+----------------------------------------+
|(YearMonthInterval('1 year')+YearMonthInterval('1 month'))|(YearMonthInterval('1 year')+YearMonthInterval('13 month'))|(DatetimeInterval('21 day')+DatetimeInterval('14 day'))|(DatetimeInterval('21 day')*4)          |
+----------------------------------------------------------+-----------------------------------------------------------+-------------------------------------------------------+----------------------------------------+
|                                              1 year 1 mon|                                              2 years 1 mon|                                       35 days 00:00:00|                        84 days 00:00:00|
+----------------------------------------------------------+-----------------------------------------------------------+-------------------------------------------------------+----------------------------------------+
==

select date '+1980-02-29' + interval '1 year'
from test
where int_col = 2
--
+-----------------------------------------------------+
|(Datetime('+1980-02-29')+YearMonthInterval('1 year'))|
+-----------------------------------------------------+
|                                  1981-02-28T00:00:00|
+-----------------------------------------------------+
==

select int_col
from test
group by int_col
--
ERROR: GROUP BY without any aggregate expression is not supported yet
==

select count(*), count(1), count(0),
       sum(int_col)/count(*), avg(int_col+0)*count(1),
       max(double_col+100), min(float_col+1) from test
--
+--------------------+--------------------+--------------------+-----------------------+---------------------------+------------------------+------------------+
|count(*)            |count(1)            |count(0)            |(sum(int_col)/count(*))|(avg((int_col+0))*count(1))|max((double_col+100))   |min((float_col+1))|
+--------------------+--------------------+--------------------+-----------------------+---------------------------+------------------------+------------------+
|                  25|                  25|                  25|                      0|        -20.454545454545457|      217.57550765359252|                 1|
+--------------------+--------------------+--------------------+-----------------------+---------------------------+------------------------+------------------+
==

select count(null) from test
--
+--------------------+
|count(NULL)         |
+--------------------+
|                   0|
+--------------------+
==

select long_col/100 as group_col, count(*), sum(int_col)
from test
group by group_col
having min(float_col) > 0
--
+--------------------+--------------------+--------------------+
|group_col           |count(*)            |sum(int_col)        |
+--------------------+--------------------+--------------------+
|                   1|                   5|                   2|
|                   2|                   3|                 -16|
|                   3|                   2|                  -1|
|                   4|                   3|                   1|
|                   5|                   2|                   1|
+--------------------+--------------------+--------------------+
==

select count(*), long_col/100 as group_col1, long_col/50 as group_col2
from test
group by group_col1, group_col2
having count(*) > 0 and group_col2 > 5
order by group_col1, group_col2
--
+--------------------+--------------------+--------------------+
|count(*)            |group_col1          |group_col2          |
+--------------------+--------------------+--------------------+
|                   1|                   3|                   6|
|                   1|                   3|                   7|
|                   2|                   4|                   8|
|                   1|                   4|                   9|
|                   1|                   5|                  10|
|                   1|                   5|                  11|
+--------------------+--------------------+--------------------+
==

# TODO(team): Support uncorrelated queries.
# SELECT COUNT(*)
# FROM test
# WHERE double_col < 0
#   AND long_col > (SELECT avg(long_col) FROM test)

# TODO(team): Fix Issue #9 to enable COUNT(*).
SELECT COUNT(long_col)
FROM test,
     (SELECT AVG(long_col) a FROM test) subquery
WHERE double_col < 0
  AND long_col > subquery.a;
--
+--------------------+
|COUNT(long_col)     |
+--------------------+
|                   5|
+--------------------+
