 /**
 * This file copyright (c) 2011-2015, Quickstep Technologies LLC.
 * Copyright (c) 2015, Pivotal Software, Inc.
 * All rights reserved.
 * See file CREDITS.txt for details.
 **/

#ifndef QUICKSTEP_QUERY_EXECUTION_FOREMAN_MESSAGE_HPP_
#define QUICKSTEP_QUERY_EXECUTION_FOREMAN_MESSAGE_HPP_

#include "catalog/CatalogTypedefs.hpp"
#include "storage/StorageBlockInfo.hpp"

namespace quickstep {

/**
 * @brief The message sent to the Foreman from workers and InsertDestinations.
 *
 * @note  This class is copyable.
 **/
class ForemanMessage {
 public:
  enum ForemanMessageType {
    kWorkOrderCompletion,
    kRebuildCompletion,
    kDataPipeline,
    kWorkOrdersAvailable,
  };

  /**
   * @brief A static named constructor for generating a message after rebuild
   *        WorkOrder completion.
   *
   * @param relational_op_index The index of the relational operator in the
   *        query DAG that generated the WorkOrder.
   *
   * @param worker_id ID of the Worker that executed the rebuild WorkOrder.
   **/
  static ForemanMessage RebuildCompletionMessage(const int relational_op_index, const int worker_id) {
    return ForemanMessage(relational_op_index, worker_id, 0, 0, kRebuildCompletion);
  }

  /**
   * @brief A static named constructor for generating a message after WorkOrder
   *        completion.
   *
   * @param relational_op_index The index of the relational operator in the
   *        query DAG that generated the WorkOrder.
   *
   * @param worker_id ID of the Worker that executed the WorkOrder.
   **/
  static ForemanMessage WorkOrderCompletionMessage(const int relational_op_index, const int worker_id) {
    return ForemanMessage(relational_op_index, worker_id, 0, 0, kWorkOrderCompletion);
  }

  /**
   * @brief A static named constructor for generating a message for pipelining
   *        data block ID.
   *
   * @param relational_op_index The index of the relational operator in the
   *        query DAG that generated the output block.
   * @param output_block_id The ID of the output block being pipelined.
   * @param rel_id The ID of the relation that generated the output block.
   **/
  static ForemanMessage DataPipelineMessage(const int relational_op_index,
                                            const block_id output_block_id,
                                            const relation_id rel_id) {
    return ForemanMessage(relational_op_index, -1, output_block_id, rel_id, kDataPipeline);
  }

  /**
   * @brief A static named method for generating a message for new work orders
   *        available.
   *
   * @param relational_op_index The index of the relational operator in the
   *        query DAG that generated the output block.
   **/
  static ForemanMessage WorkOrdersAvailableMessage(const int relational_op_index) {
    return ForemanMessage(relational_op_index, -1, 0, 0, kWorkOrdersAvailable);
  }

  /**
   * @brief Get the index of the relational operator in the DAG that generated
   *        this WorkOrder.
   **/
  inline int getRelationalOpIndex() const {
    return relational_op_index_;
  }

  /**
   * @brief Get the block ID of the output block generated by the WorkOrder.
   **/
  inline block_id getOutputBlockID() const {
    return output_block_id_;
  }

  /**
   * @brief Get the ID of the worker that sent this message.
   **/
  inline int getWorkerID() const {
    return worker_id_;
  }

  /**
   * @brief Get the relation_id of the relation that generated the output_block.
   **/
  inline relation_id getRelationID() const {
    return rel_id_;
  }

  /**
   * @brief Get the type of this message.
   **/
  inline ForemanMessageType getType() const {
    return type_;
  }

 private:
  /**
   * @brief Constructor
   * @note The ForemanMessage can be sent to indicate completion of the
   *       execution of a workorder or for data pipelining.
   *
   * @param relational_op_index For WorkOrder completion messages, it's the index
   *        of the relational operator in the query DAG that generated the
   *        workorder. For data pipelineing message, it's the index of the
   *        relational operator whose output is being pipelined.
   *
   * @param worker_id For WorkOrder completion messages, ID of the worker thread
   *        that executed the WorkOrder.
   *
   * @param output_block_id The ID of the output block that's being pipelined.
   *
   * @param rel_id For data pipelining message it's the ID of the relation that
   *        generated this output block.
   *
   * @param type Type of this message.
   **/
  ForemanMessage(const int relational_op_index,
                 const int worker_id,
                 const block_id output_block_id,
                 const relation_id rel_id,
                 const ForemanMessageType type)
      : relational_op_index_(relational_op_index),
        worker_id_(worker_id),
        output_block_id_(output_block_id),
        rel_id_(rel_id),
        type_(type) {
  }

  const int relational_op_index_;
  const int worker_id_;
  const block_id output_block_id_;
  const relation_id rel_id_;
  const ForemanMessageType type_;
};

}  // namespace quickstep

#endif  // QUICKSTEP_QUERY_EXECUTION_FOREMAN_MESSAGE_HPP_
